!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DICT_ERR	dict.h	11;"	d
DICT_HT_INITIAL_SIZE	dict.h	13;"	d
DICT_OK	dict.h	10;"	d
Dict	dict.h	/^} Dict;$/;"	t	typeref:struct:dict
Entry	dict.h	/^} Entry;$/;"	t	typeref:struct:entry
FNV_32_INIT	fnv1a.h	20;"	d
FNV_32_PRIME	fnv1a.h	19;"	d
HT	dict.h	/^} HT;$/;"	t	typeref:struct:ht
Item	dict.h	/^}Item;$/;"	t	typeref:struct:item
REHASH_CONN	dict.c	15;"	d	file:
REHASH_OVER	dict.c	16;"	d	file:
Slice	slice.h	/^}Slice;$/;"	t	typeref:struct:slice
_SLICE_H	slice.h	5;"	d
__DICT_H	dict.h	8;"	d
__FNV1A_H__	fnv1a.h	17;"	d
data	slice.h	/^    char *data;$/;"	m	struct:slice	access:public
dict	dict.h	/^typedef struct dict {$/;"	s
dict::ht	dict.h	/^    HT ht[2];$/;"	m	struct:dict	access:public
dict::rehashidx	dict.h	/^    uint32 rehashidx;$/;"	m	struct:dict	access:public
dict_add	dict.c	/^int dict_add(Dict *d, Slice key, Item val)$/;"	f	signature:(Dict *d, Slice key, Item val)
dict_add	dict.h	/^int dict_add(Dict *d, Slice key, Item value);$/;"	p	signature:(Dict *d, Slice key, Item value)
dict_delete	dict.c	/^int dict_delete(Dict *d, Slice key)$/;"	f	signature:(Dict *d, Slice key)
dict_delete	dict.h	/^int dict_delete(Dict *d, Slice key);$/;"	p	signature:(Dict *d, Slice key)
dict_destroy	dict.c	/^void dict_destroy(Dict *d)$/;"	f	signature:(Dict *d)
dict_destroy	dict.h	/^void dict_destroy(Dict *d);$/;"	p	signature:(Dict *d)
dict_expand	dict.c	/^int dict_expand(Dict *d, uint32 size)$/;"	f	signature:(Dict *d, uint32 size)
dict_find	dict.c	/^static Entry *dict_find(Dict *d, Slice key)$/;"	f	file:	signature:(Dict *d, Slice key)
dict_find	dict.c	/^static Entry *dict_find(Dict *d, Slice key);$/;"	p	file:	signature:(Dict *d, Slice key)
dict_force_resize_ratio	dict.c	/^static int dict_force_resize_ratio = 5;$/;"	v	file:
dict_get	dict.c	/^Item dict_get(Dict *d, Slice key)$/;"	f	signature:(Dict *d, Slice key)
dict_get	dict.h	/^Item dict_get(Dict *d, Slice key);$/;"	p	signature:(Dict *d, Slice key)
dict_is_rehashing	dict.c	18;"	d	file:
dict_key_idx	dict.c	/^static int dict_key_idx(Dict *d, Slice key)$/;"	f	file:	signature:(Dict *d, Slice key)
dict_key_idx	dict.c	/^static int dict_key_idx(Dict *d, Slice key);$/;"	p	file:	signature:(Dict *d, Slice key)
dict_need_expand	dict.c	/^static int dict_need_expand(Dict *d)$/;"	f	file:	signature:(Dict *d)
dict_need_expand	dict.c	/^static int dict_need_expand(Dict *d);$/;"	p	file:	signature:(Dict *d)
dict_new	dict.c	/^Dict *dict_new()$/;"	f
dict_new	dict.h	/^Dict *dict_new();$/;"	p	signature:()
dict_next_power	dict.c	/^static uint32 dict_next_power(uint32 size) ;$/;"	p	file:	signature:(uint32 size)
dict_next_power	dict.c	/^static uint32 dict_next_power(uint32 size)$/;"	f	file:	signature:(uint32 size)
dict_rehash	dict.c	/^int dict_rehash(Dict *d, int n)$/;"	f	signature:(Dict *d, int n)
dict_replace	dict.c	/^int dict_replace(Dict *d, Slice key, Item val)$/;"	f	signature:(Dict *d, Slice key, Item val)
dict_replace	dict.h	/^int dict_replace(Dict *d, Slice key, Item value);$/;"	p	signature:(Dict *d, Slice key, Item value)
dict_reset	dict.c	/^void dict_reset(HT *ht)$/;"	f	signature:(HT *ht)
dict_resize	dict.c	/^int dict_resize(Dict *d)$/;"	f	signature:(Dict *d)
entry	dict.h	/^typedef struct entry {$/;"	s
entry::key	dict.h	/^    Slice key;$/;"	m	struct:entry	access:public
entry::next	dict.h	/^    struct entry *next;$/;"	m	struct:entry	typeref:struct:entry::entry	access:public
entry::value	dict.h	/^    Item value;$/;"	m	struct:entry	access:public
fid	dict.h	/^    int fid;$/;"	m	struct:item	access:public
fnv1a	fnv1a.h	/^inline uint32_t fnv1a(const char *key, int key_len)$/;"	f	signature:(const char *key, int key_len)
hash_key	dict.c	/^static uint32 hash_key(Slice key)$/;"	f	file:	signature:(Slice key)
hash_key	dict.c	/^static uint32 hash_key(Slice key);$/;"	p	file:	signature:(Slice key)
ht	dict.h	/^    HT ht[2];$/;"	m	struct:dict	access:public
ht	dict.h	/^typedef struct ht {$/;"	s
ht::size	dict.h	/^    uint32 size;$/;"	m	struct:ht	access:public
ht::table	dict.h	/^    Entry **table;$/;"	m	struct:ht	access:public
ht::used	dict.h	/^    uint32 used;$/;"	m	struct:ht	access:public
ht_destroy	dict.c	/^static int ht_destroy(HT *ht)$/;"	f	file:	signature:(HT *ht)
ht_destroy	dict.c	/^static int ht_destroy(HT *ht);$/;"	p	file:	signature:(HT *ht)
item	dict.h	/^typedef struct item {$/;"	s
item::fid	dict.h	/^    int fid;$/;"	m	struct:item	access:public
item::tstamp	dict.h	/^    long long tstamp;$/;"	m	struct:item	access:public
item::vpos	dict.h	/^    int vpos;$/;"	m	struct:item	access:public
item::vsz	dict.h	/^    int vsz;$/;"	m	struct:item	access:public
key	dict.h	/^    Slice key;$/;"	m	struct:entry	access:public
malloc	dict.h	25;"	d
my_malloc	dict.h	/^static void *my_malloc(size_t s, const char *file, int line, const char *func) {$/;"	f	signature:(size_t s, const char *file, int line, const char *func)
next	dict.h	/^    struct entry *next;$/;"	m	struct:entry	typeref:struct:entry::entry	access:public
rehashidx	dict.h	/^    uint32 rehashidx;$/;"	m	struct:dict	access:public
size	dict.h	/^    uint32 size;$/;"	m	struct:ht	access:public
size	slice.h	/^    uint32 size;$/;"	m	struct:slice	access:public
slice	slice.h	/^typedef struct slice {$/;"	s
slice2bytes	slice.h	18;"	d
slice::data	slice.h	/^    char *data;$/;"	m	struct:slice	access:public
slice::size	slice.h	/^    uint32 size;$/;"	m	struct:slice	access:public
slice_cmp	slice.c	/^int slice_cmp(Slice s1, Slice s2)$/;"	f	signature:(Slice s1, Slice s2)
slice_cmp	slice.h	/^int slice_cmp(Slice s1, Slice s2);$/;"	p	signature:(Slice s1, Slice s2)
slice_destroy	slice.c	/^void slice_destroy(Slice s)$/;"	f	signature:(Slice s)
slice_destroy	slice.h	/^void slice_destroy(Slice s);$/;"	p	signature:(Slice s)
slice_new	slice.c	/^Slice slice_new(char *str, int size)$/;"	f	signature:(char *str, int size)
slice_new	slice.h	/^Slice slice_new(char *str, int size);$/;"	p	signature:(char *str, int size)
slice_size	slice.h	19;"	d
table	dict.h	/^    Entry **table;$/;"	m	struct:ht	access:public
tstamp	dict.h	/^    long long tstamp;$/;"	m	struct:item	access:public
uint32	slice.h	/^typedef uint32_t uint32;$/;"	t
uint32_t	fnv1a.h	/^typedef unsigned int uint32_t;$/;"	t
used	dict.h	/^    uint32 used;$/;"	m	struct:ht	access:public
value	dict.h	/^    Item value;$/;"	m	struct:entry	access:public
vpos	dict.h	/^    int vpos;$/;"	m	struct:item	access:public
vsz	dict.h	/^    int vsz;$/;"	m	struct:item	access:public
